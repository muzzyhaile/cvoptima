import { useState, useRef, useEffect } from "react";
import { Card } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Badge } from "@/components/ui/badge";
import { Progress } from "@/components/ui/progress";
import { useToast } from "@/hooks/use-toast";
import * as mammoth from "mammoth";
import * as pdfjsLib from "pdfjs-dist";
import { Document, Packer, Paragraph, TextRun, HeadingLevel } from 'docx';
import html2canvas from 'html2canvas';
import jsPDF from 'jspdf';
import Docxtemplater from 'docxtemplater';
import PizZip from 'pizzip';
import { renderAsync } from 'docx-preview';
import { 
  FileText, 
  Upload, 
  Zap, 
  Download, 
  Copy,
  ArrowRight,
  CheckCircle,
  AlertCircle,
  Eye,
  Edit3,
  Link,
  ChevronRight
} from "lucide-react";

type Step = "upload" | "job-url" | "analysis" | "results";

interface Recommendation {
  type: "keyword" | "phrase" | "structure" | "achievement";
  original: string;
  suggested: string;
  reason: string;
  applied: boolean;
}

const CVOptimizer = () => {
  const [currentStep, setCurrentStep] = useState<Step>("upload");
  const [cvFile, setCvFile] = useState<File | null>(null);
  const [cvText, setCvText] = useState("");
  const [cvHtml, setCvHtml] = useState("");
  const [originalWordBuffer, setOriginalWordBuffer] = useState<ArrayBuffer | null>(null);
  const [originalFileName, setOriginalFileName] = useState("");
  const [jobUrl, setJobUrl] = useState("");
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [recommendations, setRecommendations] = useState<Recommendation[]>([]);
  const [optimizedCV, setOptimizedCV] = useState("");
  const [optimizedCVHtml, setOptimizedCVHtml] = useState("");
  const [originalCV, setOriginalCV] = useState(""); // Add original CV state
  const [fileError, setFileError] = useState("");
  const [viewMode, setViewMode] = useState<"original" | "optimized">("original");
  const cvPreviewRef = useRef<HTMLDivElement>(null);
  const docxViewerRef = useRef<HTMLDivElement>(null);

  // UseEffect to render Word document when buffer and ref are ready
  useEffect(() => {
    if (originalWordBuffer && docxViewerRef.current && viewMode === "original") {
      console.log('useEffect: Rendering DOCX preview...');
      // Add small delay to ensure DOM is ready
      setTimeout(() => renderDocxPreview(originalWordBuffer), 100);
    }
  }, [originalWordBuffer, viewMode]);
  const { toast } = useToast();

  const extractTextFromPDF = async (file: File): Promise<string> => {
    try {
      const arrayBuffer = await file.arrayBuffer();
      const pdf = await pdfjsLib.getDocument({ data: arrayBuffer }).promise;
      let fullText = '';
      
      for (let i = 1; i <= pdf.numPages; i++) {
        const page = await pdf.getPage(i);
        const textContent = await page.getTextContent();
        const textItems = textContent.items.map((item: any) => item.str);
        fullText += textItems.join(' ') + '\n';
      }
      
      return fullText.trim();
    } catch (error) {
      console.error('Error extracting PDF text:', error);
      throw new Error('Failed to extract text from PDF file');
    }
  };

  const extractFromWord = async (file: File): Promise<{ text: string; html: string }> => {
    try {
      const arrayBuffer = await file.arrayBuffer();
      const textResult = await mammoth.extractRawText({ arrayBuffer });
      const htmlResult = await mammoth.convertToHtml({ arrayBuffer });
      return {
        text: textResult.value.trim(),
        html: htmlResult.value
      };
    } catch (error) {
      console.error('Error extracting Word document:', error);
      throw new Error('Failed to extract content from Word document');
    }
  };

  const handleFileUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      setFileError("");
      setCvFile(file);
      setOriginalFileName(file.name.split('.')[0]);
      
      try {
        const fileExtension = file.name.split('.').pop()?.toLowerCase();
        let extractedText = '';
        let extractedHtml = '';
        
        if (fileExtension === 'txt') {
          // Read plain text files
          const reader = new FileReader();
          reader.onload = (e) => {
            const content = e.target?.result as string;
            setCvText(content);
            setOriginalCV(content); // Set original CV for display
            setCvHtml(`<div class="cv-content">${content.split('\n').map(line => `<p>${line || '&nbsp;'}</p>`).join('')}</div>`);
          };
          reader.readAsText(file);
          return;
        } else if (fileExtension === 'pdf') {
          // Fix PDF.js worker version mismatch
          pdfjsLib.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/4.4.168/pdf.worker.min.js`;
          extractedText = await extractTextFromPDF(file);
          extractedHtml = `<div class="cv-content">${extractedText.split('\n').map(line => `<p>${line || '&nbsp;'}</p>`).join('')}</div>`;
        } else if (fileExtension === 'docx' || fileExtension === 'doc') {
          const fileArrayBuffer = await file.arrayBuffer();
          setOriginalWordBuffer(fileArrayBuffer);
          const wordContent = await extractFromWord(file);
          extractedText = wordContent.text;
          extractedHtml = wordContent.html;
        } else {
          setFileError("Unsupported file format. Please upload a TXT, PDF, DOC, or DOCX file.");
          setCvFile(null);
          return;
        }
        
        setCvText(extractedText);
        setOriginalCV(extractedText); // Set original CV for display
        setCvHtml(extractedHtml);
        
        // Render original document if it's a Word file
        console.log('File processing complete:', {
          fileExtension,
          hasDocxViewerRef: !!docxViewerRef.current,
          hasOriginalWordBuffer: !!originalWordBuffer,
          bufferSize: originalWordBuffer?.byteLength
        });
        
        // Word document rendering is now handled by useEffect
        
        console.log('File processed successfully:', {
          fileType: fileExtension,
          textLength: extractedText.length,
          hasWordBuffer: !!originalWordBuffer
        });
        
        toast({
          title: "CV Uploaded Successfully",
          description: `${file.name} has been processed and your CV content has been extracted.`,
        });
        
      } catch (error) {
        console.error('File processing error:', error);
        setFileError(`Error processing ${file.name}. Please try a different file or format.`);
        setCvFile(null);
        setCvText("");
        setCvHtml("");
        
        toast({
          title: "File Processing Failed",
          description: "Unable to extract text from the uploaded file. Please try a different format.",
          variant: "destructive",
        });
      }
    }
  };

  const renderDocxPreview = async (arrayBuffer: ArrayBuffer) => {
    console.log('renderDocxPreview called with buffer size:', arrayBuffer.byteLength);
    
    try {
      if (!docxViewerRef.current) {
        console.error('docxViewerRef.current is null');
        return;
      }

      console.log('docxViewerRef.current exists, starting render...');
      docxViewerRef.current.innerHTML = '<div class="text-center py-4 text-blue-600">Loading Word document...</div>';
      
      // Try the simplest possible rendering first
      console.log('Calling renderAsync...');
      await renderAsync(arrayBuffer, docxViewerRef.current);
      
      console.log('DOCX preview rendered successfully!');
      
      // Verify content was actually rendered
      if (docxViewerRef.current.children.length === 0) {
        console.warn('No content rendered in docx viewer');
        throw new Error('No content was rendered');
      }
      
    } catch (error) {
      console.error('DOCX rendering failed:', error);
      console.error('Error details:', {
        name: error.name,
        message: error.message,
        stack: error.stack
      });
      
      if (docxViewerRef.current) {
        docxViewerRef.current.innerHTML = `
          <div class="p-4 bg-red-50 border border-red-200 rounded">
            <div class="text-red-800">
              <h3 class="font-semibold">Word Document Preview Failed</h3>
              <p class="text-sm mt-1">Error: ${error.message}</p>
              <details class="mt-2">
                <summary class="cursor-pointer text-xs">Technical Details</summary>
                <pre class="text-xs mt-2 p-2 bg-white rounded overflow-auto max-h-32">${error.stack}</pre>
              </details>
              <p class="text-sm mt-2 text-red-600">The document text has been extracted and is available for optimization.</p>
            </div>
          </div>
        `;
      }
    }
  };

  const proceedToJobUrl = () => {
    if (!cvFile) {
      toast({
        title: "No CV Uploaded",
        description: "Please upload your CV first.",
        variant: "destructive",
      });
      return;
    }
    setCurrentStep("job-url");
  };

  const startAnalysis = () => {
    if (!jobUrl.trim()) {
      toast({
        title: "Missing Job URL",
        description: "Please provide the job advertisement URL.",
        variant: "destructive",
      });
      return;
    }
    setCurrentStep("analysis");
    setIsAnalyzing(true);
    
    // Simulate analysis process
    setTimeout(() => {
      const mockRecommendations: Recommendation[] = [
        {
          type: "keyword",
          original: "JavaScript",
          suggested: "React, TypeScript, JavaScript ES6+",
          reason: "Job requires React and TypeScript specifically",
          applied: false
        },
        {
          type: "phrase",
          original: "Worked with team members",
          suggested: "Collaborated with cross-functional teams of 5+ developers",
          reason: "More specific and quantified",
          applied: false
        },
        {
          type: "achievement",
          original: "Developed web applications",
          suggested: "Developed 3+ responsive web applications serving 10,000+ users",
          reason: "Quantified achievements are more impactful",
          applied: false
        },
        {
          type: "structure",
          original: "Software Developer",
          suggested: "Senior Software Engineer | React & TypeScript Specialist",
          reason: "Matches job title and emphasizes key technologies",
          applied: false
        }
      ];
      
      setRecommendations(mockRecommendations);
      setOptimizedCV(cvText);
      setOptimizedCVHtml(cvHtml);
      setIsAnalyzing(false);
      setCurrentStep("results");
    }, 3000);
  };

  const applyRecommendation = (index: number) => {
    const newRecommendations = [...recommendations];
    newRecommendations[index].applied = !newRecommendations[index].applied;
    setRecommendations(newRecommendations);
    
    // Update optimized CV
    let updatedCV = cvText;
    let updatedCVHtml = cvHtml;
    newRecommendations.forEach(rec => {
      if (rec.applied) {
        updatedCV = updatedCV.replace(rec.original, rec.suggested);
        updatedCVHtml = updatedCVHtml.replace(rec.original, `<strong>${rec.suggested}</strong>`);
      }
    });
    setOptimizedCV(updatedCV);
    setOptimizedCVHtml(updatedCVHtml);
    
    toast({
      title: newRecommendations[index].applied ? "Change Applied" : "Change Reverted",
      description: `"${newRecommendations[index].original}" has been ${newRecommendations[index].applied ? 'updated' : 'reverted'}.`,
    });
  };

  const copyToClipboard = async () => {
    try {
      await navigator.clipboard.writeText(optimizedCV);
      toast({
        title: "Copied to clipboard",
        description: "The optimized CV has been copied to your clipboard.",
      });
    } catch (err) {
      toast({
        title: "Copy failed",
        description: "Unable to copy to clipboard.",
        variant: "destructive",
      });
    }
  };

  const downloadAsWord = async () => {
    try {
      if (!originalWordBuffer) {
        // Fallback to creating new document if no original buffer
        const paragraphs = optimizedCV.split('\n\n').map(paragraph => {
          const trimmed = paragraph.trim();
          if (!trimmed) return new Paragraph({ children: [new TextRun(" ")] });
          
          const isHeading = trimmed.length < 50 && (trimmed === trimmed.toUpperCase() || trimmed.endsWith(':'));
          
          return new Paragraph({
            children: [new TextRun({
              text: trimmed,
              bold: isHeading,
              size: isHeading ? 28 : 24
            })],
            heading: isHeading ? HeadingLevel.HEADING_2 : undefined,
            spacing: { after: isHeading ? 240 : 120 }
          });
        });

        const doc = new Document({
          sections: [{
            properties: {},
            children: paragraphs
          }]
        });

        const buffer = await Packer.toBuffer(doc);
        const blob = new Blob([buffer], { 
          type: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document' 
        });
        
        const element = document.createElement('a');
        element.href = URL.createObjectURL(blob);
        element.download = `${originalFileName || 'optimized-cv'}.docx`;
        document.body.appendChild(element);
        element.click();
        document.body.removeChild(element);
        
        toast({
          title: "CV downloaded as Word",
          description: "Your optimized CV has been downloaded as a Word document.",
        });
        return;
      }

      // Work with original Word document and apply text replacements
      await createOptimizedWordDocument();
      
    } catch (error) {
      console.error('Error creating Word document:', error);
      toast({
        title: "Download failed",
        description: "Failed to create Word document. Please try again.",
        variant: "destructive",
      });
    }
  };

  const createOptimizedWordDocument = async () => {
    try {
      if (!originalWordBuffer) {
        throw new Error("Original Word document buffer not available");
      }

      // Load the original document as a zip file
      const zip = new PizZip(originalWordBuffer);
      
      // Create a docxtemplater instance with the original document
      const doc = new Docxtemplater(zip, {
        paragraphLoop: true,
        linebreaks: true,
      });

      // Read the document.xml content to apply text replacements
      let documentXml = zip.files["word/document.xml"].asText();
      
      // Apply all approved recommendations to the document XML while preserving formatting
      recommendations.forEach(rec => {
        if (rec.applied) {
          // Escape special XML characters in the original text
          const escapedOriginal = rec.original
            .replace(/&/g, '&amp;')
            .replace(/</g, '&lt;')
            .replace(/>/g, '&gt;')
            .replace(/"/g, '&quot;')
            .replace(/'/g, '&apos;');
          
          const escapedSuggested = rec.suggested
            .replace(/&/g, '&amp;')
            .replace(/</g, '&lt;')
            .replace(/>/g, '&gt;')
            .replace(/"/g, '&quot;')
            .replace(/'/g, '&apos;');

          // Replace the text in the XML while preserving formatting
          const regex = new RegExp(escapedOriginal.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'), 'gi');
          documentXml = documentXml.replace(regex, escapedSuggested);
        }
      });

      // Update the document.xml in the zip
      zip.file("word/document.xml", documentXml);

      // Generate the updated document
      const buf = zip.generate({ 
        type: "uint8array",
        mimeType: "application/vnd.openxmlformats-officedocument.wordprocessingml.document"
      });
      
      // Convert to blob for download
      const blob = new Blob([buf], { 
        type: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document' 
      });
      
      const element = document.createElement('a');
      element.href = URL.createObjectURL(blob);
      element.download = `${originalFileName || 'optimized-cv'}.docx`;
      document.body.appendChild(element);
      element.click();
      document.body.removeChild(element);
      
      toast({
        title: "CV downloaded as Word",
        description: "Your optimized CV has been downloaded with exact formatting preserved.",
      });
      
    } catch (error) {
      console.error('Error in createOptimizedWordDocument:', error);
      
      // Fallback to creating a new document if direct XML manipulation fails
      try {
        const paragraphs = optimizedCV.split('\n').filter(line => line.trim()).map(line => {
          const trimmed = line.trim();
          const isHeading = trimmed.length < 60 && (
            trimmed === trimmed.toUpperCase() ||
            trimmed.endsWith(':') ||
            /^[A-Z][A-Z\s&]+$/.test(trimmed)
          );
          
          return new Paragraph({
            children: [new TextRun({
              text: trimmed,
              bold: isHeading,
              size: isHeading ? 24 : 22
            })],
            spacing: { 
              after: isHeading ? 200 : 100,
              before: isHeading ? 100 : 0
            }
          });
        });

        const newDoc = new Document({
          sections: [{
            properties: {
              page: {
                margin: {
                  top: 720,
                  right: 720,
                  bottom: 720,
                  left: 720,
                }
              }
            },
            children: paragraphs
          }]
        });

        const buffer = await Packer.toBuffer(newDoc);
        const blob = new Blob([buffer], { 
          type: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document' 
        });
        
        const element = document.createElement('a');
        element.href = URL.createObjectURL(blob);
        element.download = `${originalFileName || 'optimized-cv'}.docx`;
        document.body.appendChild(element);
        element.click();
        document.body.removeChild(element);
        
        toast({
          title: "CV downloaded as Word",
          description: "Your optimized CV has been downloaded (fallback formatting).",
        });
        
      } catch (fallbackError) {
        console.error('Fallback creation also failed:', fallbackError);
        throw new Error("Failed to create Word document with both methods");
      }
    }
  };

  const downloadAsPDF = async () => {
    try {
      if (!cvPreviewRef.current) return;
      
      const canvas = await html2canvas(cvPreviewRef.current, {
        scale: 2,
        useCORS: true,
        allowTaint: true,
        backgroundColor: '#ffffff'
      });
      
      const imgData = canvas.toDataURL('image/png');
      const pdf = new jsPDF('p', 'mm', 'a4');
      const imgWidth = 210;
      const pageHeight = 295;
      const imgHeight = (canvas.height * imgWidth) / canvas.width;
      let heightLeft = imgHeight;
      let position = 0;

      pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);
      heightLeft -= pageHeight;

      while (heightLeft >= 0) {
        position = heightLeft - imgHeight;
        pdf.addPage();
        pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);
        heightLeft -= pageHeight;
      }

      pdf.save(`${originalFileName || 'optimized-cv'}.pdf`);
      
      toast({
        title: "CV downloaded as PDF",
        description: "Your optimized CV has been downloaded as a PDF.",
      });
    } catch (error) {
      console.error('Error creating PDF:', error);
      toast({
        title: "Download failed",
        description: "Failed to create PDF. Please try again.",
        variant: "destructive",
      });
    }
  };

  const downloadAsText = () => {
    const element = document.createElement("a");
    const file = new Blob([optimizedCV], { type: "text/plain" });
    element.href = URL.createObjectURL(file);
    element.download = `${originalFileName || 'optimized-cv'}.txt`;
    document.body.appendChild(element);
    element.click();
    document.body.removeChild(element);
    
    toast({
      title: "CV downloaded as text",
      description: "Your optimized CV has been downloaded as a text file.",
    });
  };

  const getStepProgress = () => {
    switch (currentStep) {
      case "upload": return 25;
      case "job-url": return 50;
      case "analysis": return 75;
      case "results": return 100;
      default: return 0;
    }
  };

  const renderStepContent = () => {
    switch (currentStep) {
      case "upload":
        return (
          <div className="max-w-4xl mx-auto">
            <Card className="p-12 bg-card border-4 border-white shadow-brutal">
              <div className="text-center mb-8">
                <Upload className="h-20 w-20 text-primary mx-auto mb-6 bg-background border-4 border-white p-2" />
                <h2 className="text-4xl font-black mb-4 text-white uppercase">UPLOAD YOUR CV</h2>
                <p className="text-white font-mono uppercase tracking-wide text-lg">
                  START BY UPLOADING YOUR CURRENT CV.<br/>
                  WE SUPPORT PDF, DOC, AND TXT FILES.
                </p>
              </div>
              
              <div className="space-y-6">
                <div className="border-4 border-dashed border-white p-8">
                  <Input
                    type="file"
                    accept=".pdf,.doc,.docx,.txt"
                    onChange={handleFileUpload}
                    className="cursor-pointer border-4 border-white bg-input text-white text-lg p-4 font-mono"
                  />
                  <p className="text-sm text-white mt-4 font-mono uppercase">
                    SUPPORTED FORMATS: PDF, DOC, DOCX, TXT
                  </p>
                </div>
                
                {fileError && (
                  <div className="flex items-center gap-4 p-6 bg-destructive border-4 border-white">
                    <AlertCircle className="h-8 w-8 text-white" />
                    <span className="text-lg font-mono text-white uppercase">{fileError}</span>
                  </div>
                )}
                
                {cvFile && !fileError && (
                  <div className="flex items-center justify-between p-6 bg-success border-4 border-white">
                    <div className="flex items-center gap-4">
                      <CheckCircle className="h-8 w-8 text-white" />
                      <span className="text-lg font-mono text-white font-bold uppercase">{cvFile.name}</span>
                    </div>
                    <div className="bg-primary px-4 py-2 border-2 border-black">
                      <span className="text-black font-black text-sm uppercase">PROCESSED</span>
                    </div>
                  </div>
                )}
                
                <Button 
                  onClick={proceedToJobUrl}
                  disabled={!cvFile || !!fileError}
                  className="w-full py-6 text-xl font-black shadow-brutal btn-primary-brutal"
                  size="lg"
                >
                  CONTINUE TO JOB URL
                  <ChevronRight className="ml-4 h-6 w-6" />
                </Button>
              </div>
            </Card>
          </div>
        );

      case "job-url":
        return (
          <div className="max-w-4xl mx-auto">
            <Card className="p-12 bg-card border-4 border-white shadow-brutal">
              <div className="text-center mb-8">
                <Link className="h-20 w-20 text-primary mx-auto mb-6 bg-background border-4 border-white p-2" />
                <h2 className="text-4xl font-black mb-4 text-white uppercase">JOB ADVERTISEMENT URL</h2>
                <p className="text-white font-mono uppercase tracking-wide text-lg">
                  PROVIDE THE URL OF THE JOB YOU'RE APPLYING FOR<br/>
                  SO WE CAN TAILOR YOUR CV ACCORDINGLY.
                </p>
              </div>
              
              <div className="space-y-6">
                <div className="border-4 border-dashed border-white p-8">
                  <Input
                    type="url"
                    placeholder="HTTPS://EXAMPLE.COM/JOB-POSTING"
                    value={jobUrl}
                    onChange={(e) => setJobUrl(e.target.value)}
                    className="text-center border-4 border-white bg-input text-white text-lg p-4 font-mono uppercase"
                  />
                  <p className="text-sm text-white text-center mt-4 font-mono uppercase">
                    PASTE THE FULL URL OF THE JOB ADVERTISEMENT
                  </p>
                </div>
                
                <Button 
                  onClick={startAnalysis}
                  disabled={!jobUrl.trim()}
                  className="w-full py-6 text-xl font-black shadow-brutal btn-primary-brutal"
                  size="lg"
                >
                  START AI ANALYSIS
                  <Zap className="ml-4 h-6 w-6" />
                </Button>
              </div>
            </Card>
          </div>
        );

      case "analysis":
        return (
          <div className="max-w-4xl mx-auto text-center">
            <Card className="p-12 bg-card border-4 border-white shadow-brutal">
              <div className="bg-primary border-4 border-white p-8 inline-block mb-8">
                <Zap className="h-16 w-16 text-black" />
              </div>
              <h2 className="text-4xl font-black mb-6 text-white uppercase">ANALYZING YOUR CV</h2>
              <p className="text-white mb-8 font-mono text-lg uppercase tracking-wide">
                AI ALGORITHM IS ANALYZING YOUR CV AGAINST JOB REQUIREMENTS<br/>
                AND GENERATING PERSONALIZED RECOMMENDATIONS.
              </p>
              <div className="w-full bg-muted border-4 border-white h-8 mb-6">
                <div 
                  className="bg-primary h-full border-2 border-black" 
                  style={{ width: "60%" }}
                ></div>
              </div>
              <p className="text-white font-mono uppercase font-bold">
                PROCESSING... THIS USUALLY TAKES 2-3 SECONDS
              </p>
            </Card>
          </div>
        );

      case "results":
        return (
          <div className="space-y-8">
            {/* Full-width CV Preview - Now takes priority */}
            <Card className="p-6 bg-card border-4 border-white shadow-brutal">
              <div className="flex items-center justify-between mb-6 pb-4 border-b-4 border-white">
                <h2 className="text-2xl font-black text-white uppercase">CV PREVIEW - FULL WIDTH</h2>
                <div className="flex gap-2 flex-wrap">
                  <div className="flex border-4 border-white bg-background">
                    <Button
                      variant={viewMode === "original" ? "default" : "ghost"}
                      size="sm"
                      onClick={() => setViewMode("original")}
                      className="border-r-2 border-white font-black btn-primary-brutal"
                    >
                      <Eye className="h-4 w-4 mr-2" />
                      ORIGINAL
                    </Button>
                    <Button
                      variant={viewMode === "optimized" ? "default" : "ghost"}
                      size="sm"
                      onClick={() => setViewMode("optimized")}
                      className="font-black btn-primary-brutal"
                    >
                      <Edit3 className="h-4 w-4 mr-2" />
                      OPTIMIZED
                    </Button>
                  </div>
                  <Button variant="outline" size="sm" onClick={copyToClipboard} className="btn-outline-brutal">
                    <Copy className="h-4 w-4 mr-2" />
                    COPY
                  </Button>
                  <Button variant="outline" size="sm" onClick={downloadAsWord} className="btn-outline-brutal">
                    <Download className="h-4 w-4 mr-2" />
                    WORD
                  </Button>
                  <Button variant="outline" size="sm" onClick={downloadAsPDF} className="btn-outline-brutal">
                    <FileText className="h-4 w-4 mr-2" />
                    PDF
                  </Button>
                  <Button variant="outline" size="sm" onClick={downloadAsText} className="btn-outline-brutal">
                    <FileText className="h-4 w-4 mr-2" />
                    TEXT
                  </Button>
                </div>
              </div>
              
              {/* CV Content Display - Now full width with better readability */}
              <div className="bg-background border-4 border-white p-8 min-h-[600px] max-h-[800px] overflow-auto">
                <div className="prose prose-invert max-w-none">
                  <pre className="whitespace-pre-wrap font-mono text-sm text-white leading-relaxed">
                    {viewMode === "original" ? originalCV : optimizedCV}
                  </pre>
                </div>
              </div>
            </Card>

            {/* Recommendations Panel - Now below, full width */}
            <Card className="p-6 bg-card border-4 border-white shadow-brutal">
              <div className="flex items-center justify-between mb-8 pb-4 border-b-4 border-white">
                <h2 className="text-2xl font-black text-white uppercase">AI RECOMMENDATIONS</h2>
                <div className="bg-primary px-4 py-2 border-2 border-black">
                  <span className="text-black font-black text-sm font-mono">
                    {recommendations.filter(r => r.applied).length}/{recommendations.length} APPLIED
                  </span>
                </div>
              </div>
              
              <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
                {recommendations.map((rec, index) => (
                  <div key={index} className="border-4 border-white p-6 bg-muted shadow-brutal">
                    <div className="flex items-start justify-between mb-4">
                      <div className="bg-primary px-3 py-1 border-2 border-black">
                        <span className="text-black font-black text-xs uppercase font-mono">
                          {rec.type}
                        </span>
                      </div>
                      <Button
                        size="sm"
                        variant={rec.applied ? "default" : "outline"}
                        onClick={() => applyRecommendation(index)}
                        className={rec.applied ? "btn-primary-brutal" : "btn-outline-brutal"}
                      >
                        {rec.applied ? (
                          <>
                            <CheckCircle className="h-4 w-4 mr-2" />
                            APPLIED
                          </>
                        ) : (
                          <>
                            <Edit3 className="h-4 w-4 mr-2" />
                            APPLY
                          </>
                        )}
                      </Button>
                    </div>
                    
                    <div className="space-y-4">
                      <div>
                        <p className="text-sm font-black text-white font-mono uppercase mb-2">ORIGINAL:</p>
                        <p className="text-sm bg-background p-3 border-2 border-white font-mono text-white">{rec.original}</p>
                      </div>
                      <div>
                        <p className="text-sm font-black text-white font-mono uppercase mb-2">SUGGESTED:</p>
                        <p className="text-sm bg-primary p-3 border-2 border-black font-mono text-black font-bold">{rec.suggested}</p>
                      </div>
                      <div>
                        <p className="text-sm font-black text-white font-mono uppercase mb-2">REASON:</p>
                        <p className="text-xs text-white font-mono">{rec.reason}</p>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </Card>
          </div>
        );}
            <Card className="p-6 bg-card border-4 border-white shadow-brutal overflow-auto">
              <div className="flex items-center justify-between mb-8 pb-4 border-b-4 border-white">
                <h2 className="text-2xl font-black text-white uppercase">CV PREVIEW</h2>
                <div className="flex gap-2 flex-wrap">
                  <div className="flex border-4 border-white bg-background">
                    <Button
                      variant={viewMode === "original" ? "default" : "ghost"}
                      size="sm"
                      onClick={() => setViewMode("original")}
                      className="border-r-2 border-white font-black btn-primary-brutal"
                    >
                      <Eye className="h-4 w-4 mr-2" />
                      ORIGINAL
                    </Button>
                    <Button
                      variant={viewMode === "optimized" ? "default" : "ghost"}
                      size="sm"
                      onClick={() => setViewMode("optimized")}
                      className="font-black btn-primary-brutal"
                    >
                      <Edit3 className="h-4 w-4 mr-2" />
                      OPTIMIZED
                    </Button>
                  </div>
                  <Button variant="outline" size="sm" onClick={copyToClipboard} className="btn-outline-brutal">
                    <Copy className="h-4 w-4 mr-1" />
                    COPY
                  </Button>
                  <Button variant="outline" size="sm" onClick={downloadAsWord} className="btn-outline-brutal">
                    <Download className="h-4 w-4 mr-1" />
                    WORD
                  </Button>
                  <Button variant="outline" size="sm" onClick={downloadAsPDF} className="btn-outline-brutal">
                    <Download className="h-4 w-4 mr-1" />
                    PDF
                  </Button>
                  <Button variant="outline" size="sm" onClick={downloadAsText} className="btn-outline-brutal">
                    <Download className="h-4 w-4 mr-1" />
                    TEXT
                  </Button>
                </div>
              </div>
              
              <div className="bg-white border-4 border-foreground p-6 min-h-[400px]">
                {viewMode === "original" ? (
                  <>
                    {originalWordBuffer ? (
                      <div style={{ minHeight: '400px' }}>
                        <div 
                          ref={docxViewerRef}
                          className="docx-preview border-2 border-gray-300"
                          style={{ minHeight: '400px' }}
                        />
                        {/* Debug Info */}
                        <div className="mt-4 p-4 bg-gray-100 border-2 border-gray-400">
                          <p className="text-sm text-gray-700 mb-2 font-mono font-bold">DEBUG INFO:</p>
                          <div className="text-xs text-gray-600 font-mono space-y-1">
                            <div>BUFFER SIZE: {originalWordBuffer.byteLength} BYTES</div>
                            <div>FILE NAME: {originalFileName}</div>
                            <div>TEXT LENGTH: {cvText.length} CHARACTERS</div>
                          </div>
                          <details className="mt-2">
                            <summary className="text-sm cursor-pointer font-mono font-bold">SHOW EXTRACTED TEXT (FALLBACK)</summary>
                            <div 
                              className="mt-2 p-2 bg-white border-2 border-gray-400 text-sm max-h-48 overflow-y-auto font-mono"
                              style={{ whiteSpace: 'pre-wrap' }}
                            >
                              {cvText}
                            </div>
                          </details>
                        </div>
                      </div>
                    ) : cvFile?.name.endsWith('.pdf') ? (
                      <div className="text-center py-8">
                        <FileText className="h-16 w-16 text-muted-foreground mx-auto mb-4" />
                        <p className="text-muted-foreground font-mono font-bold uppercase">PDF PREVIEW</p>
                        <p className="text-sm text-muted-foreground mt-2 font-mono">
                          ORIGINAL PDF FORMAT PRESERVED FOR DOWNLOAD
                        </p>
                      </div>
                    ) : (
                      <div 
                        className="original-text-preview font-mono"
                        style={{
                          lineHeight: '1.6',
                          color: '#333',
                          whiteSpace: 'pre-wrap'
                        }}
                      >
                        {cvText || "NO ORIGINAL DOCUMENT TO DISPLAY"}
                      </div>
                    )}
                  </>
                ) : (
                  <div 
                    ref={cvPreviewRef}
                    className="cv-preview-content"
                    style={{
                      lineHeight: '1.6',
                      color: '#333',
                      backgroundColor: '#ffffff'
                    }}
                  >
                    {optimizedCVHtml ? (
                      <div 
                        dangerouslySetInnerHTML={{ __html: optimizedCVHtml }}
                        className="prose prose-sm max-w-none [&>p]:mb-2 [&>h1]:text-xl [&>h1]:font-bold [&>h1]:mb-3 [&>h2]:text-lg [&>h2]:font-semibold [&>h2]:mb-2 [&>h3]:text-base [&>h3]:font-medium [&>h3]:mb-1"
                      />
                    ) : (
                      <div className="text-gray-500 text-center py-8 font-mono">
                        YOUR OPTIMIZED CV CONTENT WILL APPEAR HERE AFTER APPLYING RECOMMENDATIONS...
                      </div>
      default:
        return null;
    }
  };

  return (
    <div className="min-h-screen bg-background">
      <div className="container mx-auto px-4 py-8">
        {/* Brutal Header */}
        <div className="text-center mb-12">
          <h1 className="text-5xl md:text-7xl font-black text-foreground mb-6 text-brutal leading-none">
            CV<br/>
            <span className="text-primary">OPTIMIZER</span>
          </h1>
          <p className="text-xl md:text-2xl text-muted-foreground max-w-4xl mx-auto font-mono uppercase tracking-wide">
            UPLOAD YOUR WORD CV, GET AI RECOMMENDATIONS,<br/>
            AND DOWNLOAD AS WORD OR PDF
          </p>
        </div>

        {/* Brutal Progress Bar */}
        <div className="max-w-4xl mx-auto mb-12">
          <div className="flex items-center justify-between mb-4">
            <span className="text-lg font-black font-mono uppercase tracking-wider">PROGRESS</span>
            <span className="text-lg text-primary font-black font-mono">{getStepProgress()}%</span>
          </div>
          <div className="w-full bg-muted border-4 border-foreground h-8">
            <div 
              className="bg-primary h-full border-2 border-foreground transition-none" 
              style={{ width: `${getStepProgress()}%` }}
            ></div>
          </div>
        </div>

        {/* Step Content */}
        {renderStepContent()}
      </div>
    </div>
  );
};

export default CVOptimizer;